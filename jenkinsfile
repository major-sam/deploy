TAG_PLACEHOOLDER="Latest Commit"
TESTS_JSON = 'tests.json'
POST_JSON = 'post.json'
SOURCES_JSON = "deploy.json"
CLEAN_JSON = 'cleanup.json'
VM_LIST = ["devops-test-vm1","vm-n2-ws12", "vm-n2-ws3", "vm-n2-ws2", "vm-n2-ws1"]

def getParralelDeliveryMap(src){
      return src.collectEntries{[ (it['name']) : deliverSources(it) ]}
}

def deliverSources(src){
  return{
    stage(src['name']){ 
      println "${src['source']}"     
      powershell encoding:'UTF-8', script:"${src['source']}"
    }
  }
}


pipeline{
  parameters {
      choice(name:"TESTVM", choices:VM_LIST )
  }

  agent {label "${TESTVM}" }

  stages{
    stage('Choose release tag'){
      steps{
        script{
          def tags = powershell(
                     returnStdout:true,
                     encoding:'UTF-8',
                     script:'git tag'
                     ).replaceAll("[\\s ,\\p{Z}, \\p{C}]+", "").trim().split("\\r?\\n") as List
          println tags
          println tags.getClass()
          println tags.isEmpty()
          if (tags[0] =~ /[a-zA-Z]/){
            tags.add(0,TAG_PLACEHOOLDER)
            println tags
            tag = input message: 'Choose release to deploy', ok: 'Deploy!',
                  parameters: [choice (name: '', choices: tags, description: "Choose release")]
            println tag
            if(tag != TAG_PLACEHOOLDER){
              powershell "git checkout tags/${tag}"
            }
          }
        }
      }
    }

    stage('cleanup'){
      steps{
	    script{
          def data = readJSON file: CLEAN_JSON
          def map = getParralelDeliveryMap(data)
          parallel map
        }
      }
    }

    stage('Deploy'){ 
      steps{
        script{
          def data = readJSON file: SOURCES_JSON
          def map = getParralelDeliveryMap(data)
          parallel map
        }
      }
    }    

    stage('Config IIS'){
	  steps{
		powershell '.\\scripts\\IISConfig.ps1'
	  }
	}

    stage('PostDepoy'){
      steps{ 
        withCredentials([usernamePassword(credentialsId: 'Testkernel', usernameVariable: 'ServiceUserName', passwordVariable: 'ServiceUserPassword')]) {      
			script{ 
			  def data = readJSON file: POST_JSON
			  def map = getParralelDeliveryMap(data)
			  parallel map
			}
        }
      }
    }

    stage('Tests'){
      steps{ 
		withCredentials([usernamePassword(credentialsId: 'Testkernel', usernameVariable: 'ServiceUserName', passwordVariable: 'ServiceUserPassword')]) {      
			script{ 
			  def data = readJSON file: TESTS_JSON
			  def map = getParralelDeliveryMap(data)
			  parallel map
			}
        }
      }
    }
  }
}
