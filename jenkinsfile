import groovy.json.JsonSlurperClassic

TAG_PLACEHOOLDER="Latest Commit"
TESTS_JSON = 'tests.json'

POST_JSON = 'post.json'
POST_TT_JSON = 'post_tt.json'
POST_PAY_JSON = 'post_pay.json'
POST_MS_JSON = 'post_ms.json'

DEPLOY_JSON = "deploy.json"
DEPLOY_TT_JSON = "deploy_tt.json"
DEPLOY_PAY_JSON = "deploy_pay.json"
DEPLOY_MS_JSON = "deploy_ms.json"

CLEAN_JSON = 'cleanup.json'
nexusArtifacts = []

def getNexusArtifactList(){
	def scriptMap = new JsonSlurperClassic().parseText(
		 powershell (
			 returnStdout: true,
			 script : "curl.exe -u ${env.NEXUS_CREDS_USR}:${env.NEXUS_CREDS_PSW}  -X GET  \"http://nexus:8081/service/rest/v1/repositories?type=hosted\"  -H \"accept: application/json\""
			 )
		 )
	def repos = scriptMap.findAll{ it.format == "maven2" &&  it.type == "hosted"}
	return repos*.name
}

def getVmList(int max){
    def ints = 10..max
    def VM_LIST = ["devops-test-vm1",
		"devops-test-vm2", 
		"devops-test-vm3",
		"devops-test-vm4",
		"devops-test-vm5",
		"devops-test-vm6",
		"devops-test-vm7",
		"devops-test-vm8",
		"devops-test-vm9"
	]
	for (id in ints){
		VM_LIST += "devops-testvm${id}"
		}
	return VM_LIST
	}

def getNexusBranch (repoName, userTask){
	def result = 'master'
	if(params.Task != ""){
		def repoMap = new JsonSlurperClassic().parseText(
			powershell (
				returnStdout: true,
				script : "curl.exe -u ${env.NEXUS_CREDS_USR}:${env.NEXUS_CREDS_PSW}  -X GET \"http://nexus:8081/service/rest/v1/search?repository=${repoName}&maven.groupId=${repoName}&maven.artifactId=${userTask}\" -H \"accept: application/json\""
				)
			)
		if(repoMap.items){
			result = params.Task
			}	
	}
	return result
}

def doMavenDeploy(repo){
	def deployDir = "\"-Ddeploy.dir=${repo['deployDir']}${repo['name']}\""
	taskBranch = getNexusBranch (repo['name'], params.Task)	
	//for future usage
	def deployVersion = ""
	def deployExec = "\"-Ddeploy.exec=${repo['source']}\""
	//for future usage
	def deployParams = "\"-Ddeploy.groupid=${repo['name']}\"  \"-Ddeploy.branch=${taskBranch}\" ${deployDir} ${deployExec} ${deployVersion}"
	configFileProvider(
		[
			configFile(
			   fileId: 'mavenSettingsGlobal', 
			   targetLocation: 'MAVEN_SETTINGS.xml'),
			configFile(
			   fileId: 'defaultPOM', 
			   targetLocation: 'pomxml')
		]){
		powershell "mvn clean dependency:unpack  exec:exec -s MAVEN_SETTINGS.xml -f pomxml ${deployParams}"
	}
}


def getParralelDeliveryMap(src,stage){
	  println "$stage is stage in parrallel ###########"
      if (stage ==~ "Deploy" ){ 
	  println "MAVEN_################ stage in parrallel ###########"
		  return src.collectEntries{[ (it['name']) : deliverSources(it,true) ]}
	  }else{
	  println "NON!!!MAVEN_################ stage in parrallel ###########"
		  return src.collectEntries{[ (it['name']) : deliverSources(it,false) ]}
	  }
}

def deliverSources(src,state){
  if (src['name'] in nexusArtifacts && state){
	  return{
		stage(src['name']){ 
		  doMavenDeploy(src)
		}
	  }		
  }
  else{
	  return{
		stage(src['name']){ 
		  powershell (
			encoding:'UTF8', 
			script:"${src['source']}"
			)
	  }
    }
  }
}


pipeline{

  parameters {
      string name:'Task', defaultValue: "", trim: true, description: "Branch(Task)"
      choice name:"TESTVM", choices: getVmList(100)
	  booleanParam name: "DEPLOY_MS", description:'Deploy Marketing Service', defaultValue: false
	  booleanParam name: "DEPLOY_PAY", description:'Deploy Payment Balanser', defaultValue: false
	  booleanParam name: "DEPLOY_TT", description:'Deploy Trading Tool', defaultValue: false
  }

  environment {
	SERVICE_CREDS = credentials('Testkernel')
	TT_SERVICE_CREDS = credentials('kernelsvc')
	NEXUS_CREDS = credentials('jenkinsAD')
  }

  agent {label "${TESTVM}" }
  
  tools {
	maven 'maven382'
  }

  stages{

    stage('Choose release tag'){
      steps{
        script{
          def tags = powershell(
                     returnStdout:true,
                     encoding:'UTF-8',
                     script:'git tag'
                     ).split("\\r?\\n") as List
          if (tags[0] =~ /[a-zA-Z]/){
            tags.add(0,TAG_PLACEHOOLDER)
            println tags
            tag = input message: 'Choose release to deploy', ok: 'Deploy!',
                  parameters: [choice (name: '', choices: tags, description: "Choose release")]
            println tag
            if(tag != TAG_PLACEHOOLDER){
              powershell "git checkout tags/${tag}"
            }
          }
        }
      }
    }

	stage('Set Description'){
	  steps{
		script{
			def GIT_COMMIT_MSG = powershell (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
			def GIT_COMMIT = powershell (script: 'git log -1 --pretty=%h', returnStdout: true).trim()
			def BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].shortDescription} / ${currentBuild.getBuildCauses()[0].userId}"
			currentBuild.description = "${currentBuild.description ? currentBuild.description + '<br>' : ''}vm: ${TESTVM}<br>${BUILD_TRIGGER_BY}<br>CommitMsg: ${GIT_COMMIT_MSG}<br>CommitHash: ${GIT_COMMIT}"
		}
	  }
	}

    stage('Cleanup'){
      steps{
	    script{
          def data = readJSON file: CLEAN_JSON
          def map = getParralelDeliveryMap(data, "$STAGE_NAME")
          parallel map
        }
      }
    }

    stage('Deploy'){ 
      steps{
		 withCredentials([
			file ( 
			   credentialsId: 'bb-webapps', 
			   variable: 'BBWEBAPPS'),
			file (
			   credentialsId: 'gkbaltbet-ca', 
			   variable: 'GKBALTBETCA'),
			file (
			   credentialsId: 'wcf-host', 
			   variable: 'WCFHOST'),
			file (
			   credentialsId: 'wcf-host', 
			   variable: 'WCFHOST'),
			]){
			script{
			  nexusArtifacts = getNexusArtifactList()	
			  def data = readJSON file: DEPLOY_JSON 
			  def map = getParralelDeliveryMap(data, "$STAGE_NAME")
			  parallel map
		  }
        }
      }
    }    

    stage('Deploy Marketing Service'){
	  when{
		expression {
		    params.DEPLOY_MS
		}
	  }
      steps{
        script{
          def data = readJSON file: DEPLOY_MS_JSON
          def map = getParralelDeliveryMap(data, "$STAGE_NAME")
          parallel map
        }
      }
    }    

    stage('Deploy Trading Tool'){
	  when{
		expression {
		    params.DEPLOY_TT
		}
	  }
      steps{
        script{
			stage('TT Maven Deploy'){
			  //version chooser: deployVersion = "-Ddeploy.version=1.0.1.1" 
			  def deployDir = "\"-Ddeploy.dir=c:\\Services\\TradingTool \""
			  def nexusVersion = getNexusBranch ('TradingTool', params.Task)
			  def deployBranch = "\"-Ddeploy.branch=${nexusVersion}\""
			  def deployVersion = "" 
			  def deployParams = "${deployDir} ${deployBranch} ${deployVersion}"
			  configFileProvider(
				[configFile(
				   fileId: 'mavenSettingsGlobal', 
				   targetLocation: 'MAVEN_SETTINGS.xml')
				]){
				  powershell "mvn clean dependency:unpack -s MAVEN_SETTINGS.xml -f ${env.WORKSPACE}\\mvn\\pom-tt.xml ${deployParams}"
			  }
		  }
		  stage('TT settings'){
			  def data = readJSON file: DEPLOY_TT_JSON
			  def map = getParralelDeliveryMap(data, "$STAGE_NAME")
			  withCredentials([
				string(credentialsId: 'TTADFSClientId', variable: 'ADFSClientId'),
				file(credentialsId: 'TTadfs', variable: 'TTADFS')]){
				  parallel map
				}
		  }
        }
      }
    }    
	stage('Deploy Payment Balanser'){
	  when{
		expression {
		    params.DEPLOY_PAY
		}
	  }
		steps{
			script{
			  nexusArtifacts = getNexusArtifactList()	
			  def data = readJSON file: DEPLOY_PAY_JSON 
			  def map = getParralelDeliveryMap(data, "Deploy")
			  parallel map
			}
		}
	}

    stage('Config IIS'){
	  steps{
		powershell '.\\scripts\\IISConfig.ps1'
	  }
	}

    stage('Config IIS for Marketing Service'){
	  when{
		expression {
			params.DEPLOY_MS
		}
	  }
	  steps{
		powershell '.\\scripts\\IISconfigMS.ps1'
	  }
	}

    stage('Config IIS For Payment Balancer Blazor'){
	  when{
		expression {
			params.DEPLOY_PAY
		}
		
	  }
	  steps{
		powershell '.\\scripts\\IISConfigPAY.ps1'
	  }
	}

    stage('Config IIS For Trading Tool'){
	  when{
		expression {
			params.DEPLOY_TT
		}
	  }
	  steps{
		powershell '.\\scripts\\IISConfigTT.ps1'
	  }
	}

    stage('PostDepoy'){
	  stages{

		stage('PostDeploy Payment Balancer'){
			when{
			  expression {
				  params.DEPLOY_PAY
			  }
			}
			steps{
			  script{ 
				def data = readJSON file: POST_PAY_JSON
				def map = getParralelDeliveryMap(data, "$STAGE_NAME")
				parallel map
			  }
			}
		}
		
		stage('PostDeploy Marketing service'){
			when{
			  expression {
				  params.DEPLOY_MS
			  }
			}
			steps{
			  script{ 
				def data = readJSON file: POST_MS_JSON
				def map = getParralelDeliveryMap(data, "$STAGE_NAME")
				parallel map
			  }
			}
		}
		
		stage('PostDeploy TT'){
			when{
			  expression {
				  params.DEPLOY_TT
			  }
			}
			steps{
			  script{ 
				def data = readJSON file: POST_TT_JSON
				def map = getParralelDeliveryMap(data ,"$STAGE_NAME")
				parallel map
			  }
			}
		}
		
		stage('Default Post'){
		  steps{ 
			  script{ 
				def data = readJSON file: POST_JSON
				def map = getParralelDeliveryMap(data, "$STAGE_NAME")
				parallel map
			  }
		  }
	    }
      }
    }

    stage('Tests'){
      steps{ 
		script{ 
		  def data = readJSON file: TESTS_JSON
		  def map = getParralelDeliveryMap(data, "$STAGE_NAME")
		  parallel map
		}
      }
    }

  }
}
