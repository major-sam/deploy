TAG_PLACEHOOLDER="Latest Commit"
TESTS_JSON = 'tests.json'

POST_JSON = 'post.json'
POST_TT_JSON = 'post_tt.json'
POST_MS_JSON = 'post_ms.json'

DEPLOY_JSON = "deploy.json"
DEPLOY_TT_JSON = "deploy_tt.json"
DEPLOY_MS_JSON = "deploy_ms.json"

CLEAN_JSON = 'cleanup.json'

VM_LIST = ["devops-test-vm1",
	"devops-test-vm2", 
	"devops-test-vm3",
	"devops-test-vm4",
	"devops-test-vm5",
	"devops-test-vm6",
	"devops-test-vm7",
	"devops-test-vm8",
	"devops-test-vm9",
	"devops-testvm10",
	"vm-n3-ws12", "vm-n2-ws3", "vm-n2-ws2", "vm-n2-ws1"]

def getParralelDeliveryMap(src){
      return src.collectEntries{[ (it['name']) : deliverSources(it) ]}
}

def deliverSources(src){
  return{
    stage(src['name']){ 
      println "${src['source']}"     
      powershell encoding:'UTF8', script:"${src['source']}"
    }
  }
}


pipeline{

  parameters {
      choice name:"TESTVM", choices:VM_LIST 
	  booleanParam name: "DEPLOY_MS", description: 'Deploy Marketing Service', defaultValue: false
	  booleanParam name: "DEPLOY_TT", description: 'Deploy Trading Tool', defaultValue: false
  }

  environment {
	SERVICE_CREDS = credentials('Testkernel')
  }

  agent {label "${TESTVM}" }
  
  tools {
	maven 'maven382'
  }

  stages{

	stage('Set Description'){
	  steps{
		script{
			BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].shortDescription} / ${currentBuild.getBuildCauses()[0].userId}"
			currentBuild.description = "${currentBuild.description ? currentBuild.description + '<br>' : ''}vm: ${TESTVM}<br>${BUILD_TRIGGER_BY}"
		}
	  }
	}

    stage('Choose release tag'){
      steps{
        script{
          def tags = powershell(
                     returnStdout:true,
                     encoding:'UTF-8',
                     script:'git tag'
                     ).replaceAll("[\\s ,\\p{Z}, \\p{C}]+", "").trim().split("\\r?\\n") as List
          if (tags[0] =~ /[a-zA-Z]/){
            tags.add(0,TAG_PLACEHOOLDER)
            println tags
            tag = input message: 'Choose release to deploy', ok: 'Deploy!',
                  parameters: [choice (name: '', choices: tags, description: "Choose release")]
            println tag
            if(tag != TAG_PLACEHOOLDER){
              powershell "git checkout tags/${tag}"
            }
          }
        }
      }
    }

    stage('Cleanup'){
      steps{
	    script{
          def data = readJSON file: CLEAN_JSON
          def map = getParralelDeliveryMap(data)
          parallel map
        }
      }
    }

    stage('Deploy'){ 
      steps{
        script{
          def data = readJSON file: DEPLOY_JSON 
          def map = getParralelDeliveryMap(data)
          parallel map
        }
      }
    }    

    stage('Deploy Marketing Service'){
	  when{
		expression {
		    params.DEPLOY_MS
		}
	  }
      steps{
        script{
          def data = readJSON file: DEPLOY_MS_JSON
          def map = getParralelDeliveryMap(data)
          parallel map
        }
      }
    }    

    stage('Deploy Trading Tool'){
	  when{
		expression {
		    params.DEPLOY_TT
		}
	  }
      steps{
        script{
	      //version chooser: deployVersion = "-Ddeploy.version=1.0.1.1" 
		  def deployDir = "\"-Ddeploy.dir=c:\\Services\\TradingTool \""
		  def deployBranch = "\"-Ddeploy.branch=rc-2021-10-25\""
		  def deployVersion = "" 
		  def deployParams = "${deployDir} ${deployBranch} ${deployVersion}"
		  configFileProvider(
		    [configFile(
			   fileId: 'mavenSettingsGlobal', 
			   targetLocation: 'MAVEN_SETTINGS.xml')
			]){
			  powershell "mvn clean dependency:unpack -s MAVEN_SETTINGS.xml -f ${env.WORKSPACE}\\mvn\\pom-tt.xml ${deployParams}"
		  }
		  def data = readJSON file: DEPLOY_TT_JSON
          def map = getParralelDeliveryMap(data)
          parallel map
        }
      }
    }    

    stage('Config IIS'){
	  steps{
		powershell '.\\scripts\\IISConfig.ps1'
	  }
	}

    stage('Config IIS for Marketing Service'){
	  when{
		expression {
			params.DEPLOY_MS
		}
	  }
	  steps{
		powershell '.\\scripts\\IISconfigMS.ps1'
	  }
	}

    stage('Config IIS For Trading Tool'){
	  when{
		expression {
			params.DEPLOY_TT
		}
	  }
	  steps{
		powershell '.\\scripts\\IISConfigTT.ps1'
	  }
	}

    stage('PostDepoy'){
	  stages{

		stage('PostDeploy Marketing service'){
			when{
			  expression {
				  params.DEPLOY_MS
			  }
			}
			steps{
			  script{ 
				def data = readJSON file: POST_MS_JSON
				def map = getParralelDeliveryMap(data)
				parallel map
			  }
			}
		}
		
		stage('PostDeploy TT'){
			when{
			  expression {
				  params.DEPLOY_TT
			  }
			}
			steps{
			  script{ 
				def data = readJSON file: POST_TT_JSON
				def map = getParralelDeliveryMap(data)
				parallel map
			  }
			}
		}
		
		stage('Default Post'){
		  steps{ 
			  script{ 
				def data = readJSON file: POST_JSON
				def map = getParralelDeliveryMap(data)
				parallel map
			  }
		  }
	    }
      }
    }

    stage('Tests'){
      steps{ 
		script{ 
		  def data = readJSON file: TESTS_JSON
		  def map = getParralelDeliveryMap(data)
		  parallel map
		}
      }
    }

  }
}
