@Library("JenkinsCI") _

import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput
import jenkins.model.Jenkins

MavenDeployResultList = []

TESTS_JSON = 'tests.json'

POST_JSON = 'post.json'
POST_TT_JSON = 'post_tt.json'
POST_PAY_JSON = 'post_pay.json'
POST_MS_JSON = 'post_ms.json'

DEPLOY_JSON = "deploy.json"
DEPLOY_TT_JSON = "deploy_tt.json"
DEPLOY_PAY_JSON = "deploy_pay.json"
DEPLOY_MS_JSON = "deploy_ms.json"

CLEAN_JSON = 'cleanup.json'

mainBadgeId = 'mainBadgeId'
TTBadgeId = 'TTBadgeId'
PAYBadgeId = 'PayBadgeId'
MSBadgeId = 'MSBadgeId'
def BuildBadge = addEmbeddableBadgeConfiguration(id: mainBadgeId, subject: "Windows Deploy")

def getLastSuccessfullTaskJobDescription(node){
	def test_job = Jenkins.instance.getItemByFullName(JOB_NAME)
		prev_sucessful_build=test_job.getLastSuccessfulBuild()
		while (prev_sucessful_build){
			prev_sucessful_build_descr=prev_sucessful_build.getDescription()
				if(prev_sucessful_build_descr){
					if (prev_sucessful_build_descr.contains("${node}")){
						def matches = (prev_sucessful_build_descr =~ /Task\(Branch\):.*$/) 
							return [
							matches[0], 
							prev_sucessful_build.getId(), 
							prev_sucessful_build.getCauses()[0].shortDescription as String]
					}
					else{
						prev_sucessful_build = prev_sucessful_build.getPreviousSuccessfulBuild()
							prev_sucessful_build_descr = false
					}
				}
				else{
					prev_sucessful_build = prev_sucessful_build.getPreviousSuccessfulBuild()
						prev_sucessful_build_descr = false
				}
		}
}
def	addToDescription(Map config = [:]){
	def String result = ""
		if (config.position instanceof Integer){
			def splitedDescr = config.description.split('<br>') as List
				splitedDescr.add(config.position, config.html)
				result = splitedDescr.join('<br>')
		}
		else{
			result = "$config.description <br> $config.html"
		}
	return result
}

//def getNexusArtifactList(){
//	withCredentials([file(credentialsId: 'NexusNetRC', variable: 'NexusNetRC')]){
//		def text = powershell (
//				returnStdout: true,
//				script :  '''
//				curl.exe --netrc-file "$env:NexusNetRC" `
//				-X GET  "http://nexus:8081/service/rest/v1/repositories?type=hosted" `
//				-H "accept: application/json"
//				'''
//				)
//		def scriptMap = new JsonSlurperClassic().parseText(text)
//		def repos = scriptMap.findAll{ it.format == "maven2" &&  it.type == "hosted"}
//		return repos*.name
//	}
//}

def getVmList(int max){
	def ints = 10..max
		def VM_LIST = [
			"devops-test-vm1",
			"devops-test-vm2", 
			"devops-test-vm3",
			"devops-test-vm4",
			"devops-test-vm5",
			"devops-test-vm6",
			"devops-test-vm7",
			"devops-test-vm8",
			"devops-test-vm9"
		]
		for (id in ints){
			VM_LIST += "devops-testvm${id}"
		}
	return VM_LIST
}

def lookupBranchInNexus (repoName, task){
	withCredentials([file(credentialsId: 'NexusNetRC', variable: 'NexusNetRC')]){
		def text = powershell (
				returnStdout: true,
				script : '''
				curl.exe --netrc-file "$env:NexusNetRC" `
					-X GET "http://nexus:8081/service/rest/v1/search/assets?repository=''' +repoName+
					'''&maven.groupId='''+repoName+
					'''&maven.artifactId='''+task+'''&maven.extension=zip" `
					-H "accept: application/json" 4>&1 2>out-null
				'''
				)
		def repoMap = new JsonSlurperClassic().parseText(text)
		return (repoMap.items.size() > 0)
	}
}

def getNexusBranch (repoName, userTask){
	if (userTask =~ /^[A-Z]{2,}-\d+$/){
		if (lookupBranchInNexus(repoName , userTask)) { return userTask }
        if (lookupBranchInNexus(repoName , "feature-${userTask}")) { return  "feature-${userTask}" }
	}
	def NotFeatureTask =  defaultNexusNaming(userTask) 
	def hasMaster = lookupBranchInNexus(repoName, 'master')
	if(NotFeatureTask && (lookupBranchInNexus(repoName, NotFeatureTask)) ){
		return NotFeatureTask
	}
	else{
		return  (hasMaster) ? 'master' : false
	}
}


def updatePom(services, branchTask){
	services.each{ 
		nexusLookup = getNexusBranch(it, branchTask)
		if (nexusLookup && nexusLookup != 'master'){
			println 'Update pom '+ it + ' with ' + nexusLookup 
			powershell (
				script: '''
				\$pom= "'''+ "${env.WORKSPACE}\\deployPom.xml" +'''"
				\$xml= [Xml] (Get-Content \$pom)
				((\$xml.project.build.plugins.plugin  |? {
					\$_.artifactId -like 'maven-dependency-plugin' }).configuration.artifactItems.artifactItem| ? {
						\$_.groupId -like "'''+ it +'''"}).artifactId = "'''+ nexusLookup  +'''"
				\$xml.Save(\$pom)
				''',
				returnStdout:true
				)
				
		} 
	}	
}

def getPomServices(){
	def services = powershell(
		returnStdout: true,
		script:'''
			\$pom= "'''+ "${env.WORKSPACE}\\deployPom.xml" +'''"
			\$xml= [Xml] (Get-Content \$pom)
			\$artifacts=(\$xml.project.build.plugins.plugin  |? {
					 \$_.artifactId -like 'maven-dependency-plugin' }).configuration.artifactItems.artifactItem| % {
									 \$_.groupId} 
			 Write-Output ($artifacts -join ",")''',
		 encoding: 'UTF8').split(',') as List
	services[-1] = services[-1].replaceAll("[^A-Za-z0-9]", "")
	println services
	return services
}

def doMavenDeploy(taskBranch){
	services = getPomServices()
	updatePom(services,taskBranch)
	def deployParams = "\"-Dmaven.repo.local=${env.WORKSPACE}\\.mvn\\\" "
	configFileProvider(
			[
			configFile(
				fileId: 'mavenSettingsGlobal', 
				targetLocation: 'MAVEN_SETTINGS.xml')
			]){
		powershell "mvn clean versions:use-latest-releases dependency:unpack -s MAVEN_SETTINGS.xml -f deployPom.xml ${deployParams}"
	}
	services.each { service -> 
		def packageBranch = powershell (
			script:"(Get-ChildItem -Directory .\\.mvn\\${service}| Select-Object -First 1).name", 
			returnStdout: true)
		def packageVersion = powershell (
			script:"(Get-ChildItem -Directory (Get-ChildItem -Directory .\\.mvn\\${service}| Select-Object -First 1).FullName).name", 
			returnStdout: true)
		MavenDeployResultList << [
			Repo: service,
			Branch: packageBranch.trim(),
			Version: packageVersion.trim()
		]
	}
}


def getParralelDeliveryMap(src){
	return src.collectEntries{[ (it['name']) : deliverSources(it)
	]}
}

def deliverSources(src){
	return{
		stage(src['name']){ 
			powershell (
					encoding:'UTF8', 
					script:"${src['source']}"
					)
		}
	}
}


pipeline{

	parameters {
		string name:'Task', defaultValue: "", trim: true, description: "Branch(Task)"
		choice name:"TESTVM", choices: getVmList(100)
		booleanParam name: "CUSTOM_TAG", description:'Enable tag chooser', defaultValue: false
		booleanParam name: "DEPLOY_MS", description:'Deploy Marketing Service', defaultValue: false
		booleanParam name: "DEPLOY_PAY", description:'Deploy Payment Balanser', defaultValue: false
		booleanParam name: "DEPLOY_TT", description:'Deploy Trading Tool', defaultValue: false
	}

	environment {
		SERVICE_CREDS = credentials('Testkernel')
		TT_SERVICE_CREDS = credentials('kernelsvc')
		NEXUS_CREDS = credentials('jenkinsAD')
		CUPIS_CERT_PASS = credentials('CupisCertPassword')
		CUPIS_FNS_KEY = credentials('CupisFnsKey')
		CUPIS_CERT_THUMBPRINT = credentials('CupisCertThumbprint')
		CUPIS_GRPC_CERT_PASS = credentials('testCupisPasswd')
	}

	agent {label "${TESTVM}" }

	tools {
		maven 'maven382'
	}
	options {
		parallelsAlwaysFailFast()
	}

	stages{

		stage('Choose release tag'){
			
			when{
				expression {
					params.CUSTOM_TAG
				}
			}
			steps{
				script{
					BuildBadge.setStatus('running')
						def tags = powershell(
								returnStdout:true,
								encoding:'UTF-8',
								script:'git tag'
								).split("\\r?\\n") as List
						if (tags[0] =~ /[a-zA-Z]/){
							tags.add(0,"Latest Commit")
								tag = input message: 'Choose release to deploy', ok: 'Deploy!',
							parameters: [choice (name: '', choices: tags, description: "Choose release")]
								if(tag != "Latest Commit"){
									powershell "git checkout tags/${tag}"
								}
						}
				}
			}
		}

		stage('Set Description'){
			steps{
				script{
					def all_lockable_resources = org.jenkins.plugins.lockableresources.LockableResourcesManager.get().resources
					def lockable_resource = all_lockable_resources.find { r-> r.getName() == params.TESTVM}
					def boolean locked_by_me = ("${lockable_resource.getReservedBy()}" == "${currentBuild.getBuildCauses()[0].userName}")
					if (locked_by_me){
						println "Vm ${lockable_resource} is locked by current build user(${currentBuild.getBuildCauses()[0].userName}) \n Continue Build"
					}
					if (lockable_resource.isReserved() && !locked_by_me){
						def lastDescr = getLastSuccessfullTaskJobDescription(NODE_NAME)
						def lastBuildDescr = "Can't find any info about last successfull build"
						if(lastDescr){
							lastBuildDescr ="Last successfull build ${lastDescr[1]} ${lastDescr[2]} <br>Last  ${lastDescr[0]}"
						}
						currentBuild.description = "VM ${params.TESTVM} is Locked.Skipped <br><p><a href=\"${JENKINS_URL}lockable-resources/\">Remove VM Lock</a><p><br>${lastBuildDescr}"
						currentBuild.result = 'NOT_BUILT'
						error('VM is LOCKED. Check Lockable Resources')
					}
					else{
						def GIT_COMMIT_MSG = powershell (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
						def GIT_COMMIT = powershell (script: 'git log -1 --pretty=%h', returnStdout: true).trim()
						def BUILD_TRIGGER_BY = "${currentBuild.getBuildCauses()[0].shortDescription} / ${currentBuild.getBuildCauses()[0].userId}"
						currentBuild.description = "${currentBuild.description ? currentBuild.description + '<br>' : ''}vm: ${TESTVM}<br>${BUILD_TRIGGER_BY}<br>CommitMsg: ${GIT_COMMIT_MSG}<br>CommitHash: ${GIT_COMMIT}<br>Task(Branch): ${params.Task}"
						println "Locking vm ${lockable_resource} by current build user(${currentBuild.getBuildCauses()[0].userName}) \n Continue Build"
						lockable_resource.setReservedBy(currentBuild.getBuildCauses()[0].userName)
					}
					currentBuild.description = addToDescription(
							description: currentBuild.description,
							html: "<a href='${BUILD_URL}'><img src='${BUILD_URL}badge/icon?config=${mainBadgeId}'></a>",
							position: 0 )
				}
			}
		}

		stage('Cleanup'){
			steps{
				script{
					def data = readJSON file: CLEAN_JSON
					def map = getParralelDeliveryMap(data)
					parallel map
				}
			}
		}
		

		stage('Mvn Deploy'){
			steps{
				script{
					doMavenDeploy(params.Task)
				}
			}
		}

		stage('Deploy Scripts'){ 
			steps{
				withCredentials([
						file ( 
							credentialsId: 'bb-webapps', 
							variable: 'BBWEBAPPS'),
						file (
							credentialsId: 'gkbaltbet-ca', 
							variable: 'GKBALTBETCA'),
						file (
							credentialsId: 'wcf-host', 
							variable: 'WCFHOST'),
						file (
							credentialsId: 'client.test.kernel', 
							variable: 'CLIENTTESTKERNEL'),
						file (
							credentialsId: 'test.payment.service', 
							variable: 'TESTPAYMENTSERVICE'),
						file (
							credentialsId: 'testCupis', 
							variable: 'TESTCUPISCERT'),
						file (
							credentialsId: 'testCupisCA', 
							variable: 'TESTCUPISCA'),
				]){
					script{
						def data = readJSON file: DEPLOY_JSON 
						def map = getParralelDeliveryMap(data)
						parallel map
					}
				}
			}
		}    

		stage('Deploy Marketing Service'){
			when{
				expression {
					params.DEPLOY_MS
				}
			}
			steps{
				script{
					stage('Marketing Maven Deploy'){
						MSBadge = addEmbeddableBadgeConfiguration(id: MSBadgeId, subject: "Marketing Deploy")
						MSBadge.setStatus('running')
						currentBuild.description = addToDescription(
								description: currentBuild.description,
								html: "<a href='${BUILD_URL}'><img src='${BUILD_URL}badge/icon?config=${MSBadgeId}'></a>",
								position: 1)
						def deployDir = "\"-Ddeploy.dir=c:\\Services\\Marketing\""
						def taskBranch = getNexusBranch ('Marketing', params.Task)
						println taskBranch
						if (taskBranch){
							println taskBranch
							def deployBranch = "\"-Ddeploy.branch=${taskBranch}\""
							def deployParams = "\"-Dmaven.repo.local=${env.WORKSPACE}\\.mvnMarketing\\\" \"-Ddeploy.groupid=Marketing\"  ${deployDir} ${deployBranch}"
							configFileProvider(
									[configFile(
										fileId: 'mavenSettingsGlobal', 
										targetLocation: 'MAVEN_SETTINGS.xml'),
									configFile(
										fileId: 'defaultPOM', 
										targetLocation: 'pomxml')
									]){
								powershell "mvn clean versions:use-latest-releases dependency:unpack -s MAVEN_SETTINGS.xml -f pomxml ${deployParams}"
								def packageVersion = powershell (
									script:"(Get-ChildItem -Directory .\\.mvnMarketing\\Marketing\\${taskBranch}).name", 
									returnStdout: true)
								MavenDeployResultList << [
									Repo: 'Marketing',
									Branch: taskBranch,
									Version: packageVersion.trim()
								]
							}
						}
						else{
							println "Marketing repo has no master branch"
						}
					}
					stage('marketing settings'){
						def data = readJSON file: DEPLOY_MS_JSON
						def map = getParralelDeliveryMap(data)
						parallel map
					}
				}
			}
			post{
				success{script {MSBadge.setStatus('passing')}}
				failure{script {MSBadge.setStatus('failing')}}
				unstable {script {
					MSBadge.setStatus('unstable')
						MSBadge.setColor('orange')}}
				aborted {script {MSBadge.setStatus('aborted')}}
			}
		}    

		stage('Deploy Trading Tool'){
			when{
				expression {
					params.DEPLOY_TT
				}
			}
			steps{
				script{
					TTBadge = addEmbeddableBadgeConfiguration(id: TTBadgeId, subject: "TT Deploy")
					TTBadge.setStatus('running')
					currentBuild.description = addToDescription(
							description: currentBuild.description,
							html: "<a href='${BUILD_URL}'><img src='${BUILD_URL}badge/icon?config=${TTBadgeId}'></a>",
							position: 1)
					stage('TT Maven Deploy'){
						def deployDir = "\"-Ddeploy.dir=c:\\Services\\TradingTool \""
						def taskBranch = getNexusBranch ('TradingTool', params.Task)
						if (taskBranch){
							println taskBranch
							def deployBranch = "\"-Ddeploy.branch=${taskBranch}\""
							def deployParams = "\"-Dmaven.repo.local=${env.WORKSPACE}\\.mvn\\TradingTool\\\" \"-Ddeploy.groupid=TradingTool\"  ${deployDir} ${deployBranch}"
							configFileProvider(
									[configFile(
										fileId: 'mavenSettingsGlobal', 
										targetLocation: 'MAVEN_SETTINGS.xml'),
									configFile(
										fileId: 'defaultPOM', 
										targetLocation: 'pomxml')
									]){
								powershell "mvn clean versions:use-latest-releases dependency:unpack -s MAVEN_SETTINGS.xml -f pomxml ${deployParams}"
								def packageVersion = powershell (
									script:"(Get-ChildItem -Directory .\\.mvn\\TradingTool\\TradingTool\\master).name", 
									returnStdout: true)
								MavenDeployResultList << [
									Repo: 'TradingTool',
									Branch: taskBranch,
									Version: packageVersion.trim()
								]
							}
						}
						else{
							println "TT has no master branch"
						}
					}
				
					stage('TT settings'){
						def data = readJSON file: DEPLOY_TT_JSON
						def map = getParralelDeliveryMap(data)
						withCredentials([
								string(credentialsId: 'TTADFSClientId', variable: 'ADFSClientId'),
								file(credentialsId: 'TTadfs', variable: 'TTADFS')]){
							parallel map
						}
					}
				}
			}
			post{
				success{script {TTBadge.setStatus('passing')}}
				failure{script {TTBadge.setStatus('failing')}}
				unstable {script{
					TTBadge.setStatus('unstable')
						TTBadge.setColor('orange')}}
				aborted {script {TTBadge.setStatus('aborted')}}
			}
		}    

		stage('Deploy Payment Balanser'){
			when{
				expression {
					params.DEPLOY_PAY
				}
			}
			steps{
				script{
					PAYBadge = addEmbeddableBadgeConfiguration(id: PAYBadgeId, subject: "PAY Deploy")
					PAYBadge.setStatus('running')
					currentBuild.description = addToDescription(
							description: currentBuild.description,
							html: "<a href='${BUILD_URL}'><img src='${BUILD_URL}badge/icon?config=${PAYBadgeId}'></a>",
							position: 1)

					stage('PaymentBalancing Maven Deploy'){
						def deployDir = "\"-Ddeploy.dir=c:\\Services\\Payments\\PaymentBalancing \""
						def taskBranch = getNexusBranch ('PaymentBalancing', params.Task)
						if (taskBranch){
							println taskBranch
							def deployBranch = "\"-Ddeploy.branch=${taskBranch}\""
							def deployParams = "\"-Dmaven.repo.local=${env.WORKSPACE}\\.mvnPaymentBalancing\\\" \"-Ddeploy.groupid=PaymentBalancing\"  ${deployDir} ${deployBranch}"
							configFileProvider(
									[configFile(
										fileId: 'mavenSettingsGlobal', 
										targetLocation: 'MAVEN_SETTINGS.xml'),
									configFile(
										fileId: 'defaultPOM', 
										targetLocation: 'pomxml')
									]){
								powershell "mvn clean versions:use-latest-releases dependency:unpack -s MAVEN_SETTINGS.xml -f pomxml ${deployParams}"
								def packageVersion = powershell (
									script:"(Get-ChildItem -Directory .\\.mvnPaymentBalancing\\PaymentBalancing\\master).name", 
									returnStdout: true)
								MavenDeployResultList << [
									Repo: 'PaymentBalancing',
									Branch: taskBranch,
									Version: packageVersion.trim()
								]
							}
						}
						else{
							println "PaymentBalancing has no master branch"
						}
					}
					stage('PaymentBalanceReport Maven Deploy'){
						def deployDir = "\"-Ddeploy.dir=c:\\Services\\Payments\\PaymentBalanceReport \""
						def taskBranch = getNexusBranch ('PaymentBalanceReport', params.Task)
						if (taskBranch){
							println taskBranch
							def deployBranch = "\"-Ddeploy.branch=${taskBranch}\""
							def deployParams = "\"-Dmaven.repo.local=${env.WORKSPACE}\\.mvnPaymentBalancg\\\" \"-Ddeploy.groupid=PaymentBalanceReport\"  ${deployDir} ${deployBranch}"
							configFileProvider(
									[configFile(
										fileId: 'mavenSettingsGlobal', 
										targetLocation: 'MAVEN_SETTINGS.xml'),
									configFile(
										fileId: 'defaultPOM', 
										targetLocation: 'pomxml')
									]){
								powershell "mvn clean versions:use-latest-releases dependency:unpack -s MAVEN_SETTINGS.xml -f pomxml ${deployParams}"
								def packageVersion = powershell (
									script:"(Get-ChildItem -Directory .\\.mvnPaymentBalancing\\PaymentBalanceReport\\master).name", 
									returnStdout: true)
								MavenDeployResultList << [
									Repo: 'PaymentBalanceReport',
									Branch: taskBranch,
									Version: packageVersion.trim()
								]
							}
						}
						else{
							println "PaymentBalanceReport has no master branch"
						}
					}
					stage('Payments settings'){
						def data = readJSON file: DEPLOY_PAY_JSON 
						def map = getParralelDeliveryMap(data)
						parallel map
					}
				}
			}
			post{
				success{script {PAYBadge.setStatus('passing')}}
				failure{script {PAYBadge.setStatus('failing')}}
				unstable {script {
					PAYBadge.setStatus('unstable')
						PAYBadge.setColor('orange')}}
				aborted {script {PAYBadge.setStatus('aborted')}}
			}
		}

		stage('Config IIS'){
			steps{
				powershell '.\\scripts\\IISConfig.ps1'
			}
		}

		stage('Config IIS for Marketing Service'){
			when{
				expression {
					params.DEPLOY_MS
				}
			}
			steps{
				powershell '.\\scripts\\IISconfigMS.ps1'
			}
			post{
				success{script {MSBadge.setStatus('passing')}}
				failure{script {MSBadge.setStatus('failing')}}
				unstable {script {
					MSBadge.setStatus('unstable')
						MSBadge.setColor('orange')}}
				aborted {script {MSBadge.setStatus('aborted')}}
			}
		}

		stage('Config IIS For Payment Balancer Blazor'){
			when{
				expression {
					params.DEPLOY_PAY
				}

			}
			steps{
				powershell '.\\scripts\\IISConfigPAY.ps1'
			}
			post{
				success{script {PAYBadge.setStatus('passing')}}
				failure{script {PAYBadge.setStatus('failing')}}
				unstable {script {
					PAYBadge.setStatus('unstable')
						PAYBadge.setColor('orange')}}
				aborted {script {PAYBadge.setStatus('aborted')}}
			}
		}

		stage('Config IIS For Trading Tool'){
			when{
				expression {
					params.DEPLOY_TT
				}
			}
			steps{
				powershell '.\\scripts\\IISConfigTT.ps1'
			}
			post{
				success{script {TTBadge.setStatus('passing')}}
				failure{script {TTBadge.setStatus('failing')}}
				unstable {script{
					TTBadge.setStatus('unstable')
						TTBadge.setColor('orange')}}
				aborted {script {TTBadge.setStatus('aborted')}}
			}
		}

		stage('PostDeploy Payment Balancer'){
			when{
				expression {
					params.DEPLOY_PAY
				}
			}
			steps{
				script{ 
					def data = readJSON file: POST_PAY_JSON
						def map = getParralelDeliveryMap(data)
						parallel map
				}
			}
			post{
				success{script {PAYBadge.setStatus('passing')}}
				failure{script {PAYBadge.setStatus('failing')}}
				unstable {script {
					PAYBadge.setStatus('unstable')
					PAYBadge.setColor('orange')}}
				aborted {script {PAYBadge.setStatus('aborted')}}
			}
		}

		stage('PostDeploy Marketing service'){
			when{
				expression {
					params.DEPLOY_MS
				}
			}
			steps{
				script{ 
					def data = readJSON file: POST_MS_JSON
					def map = getParralelDeliveryMap(data)
					parallel map
				}
			}
			post{
				success{script {MSBadge.setStatus('passing')}}
				failure{script {MSBadge.setStatus('failing')}}
				unstable {script {
					MSBadge.setStatus('unstable')
					MSBadge.setColor('orange')}}
				aborted {script {MSBadge.setStatus('aborted')}}
			}
		}

		stage('PostDeploy TT'){
			when{
				expression {
					params.DEPLOY_TT
				}
			}
			steps{
				script{ 
					def data = readJSON file: POST_TT_JSON
					def map = getParralelDeliveryMap(data)
					parallel map
				}
			}
			post{
				success{script {TTBadge.setStatus('passing')}}
				failure{script {TTBadge.setStatus('failing')}}
				unstable {script{
					TTBadge.setStatus('unstable')
					TTBadge.setColor('orange')}}
				aborted {script {TTBadge.setStatus('aborted')}}
			}
		}

		stage('Default Post'){
			steps{ 
				script{ 
					def data = readJSON file: POST_JSON
					def map = getParralelDeliveryMap(data)
					parallel map
				}
			}
		}

		stage('Tests'){
			steps{ 
				script{ 
					def data = readJSON file: TESTS_JSON
					def map = getParralelDeliveryMap(data)
					parallel map
				}
			}
		}
		stage('Result Bundle'){
			steps{
				script{
					def jsonFormat = JsonOutput.toJson(
							MavenDeployResultList << [User: "${currentBuild.getBuildCauses()[0].userId}"]	)
							
				    prettyJSON = JsonOutput.prettyPrint(jsonFormat)
					echo "${prettyJSON}"
				}
			}
		}
	}
	post{
		always{
			script{
				touch file: "c:\\Services\\Deploy_bundle.json"
				writeFile file: "c:\\Services\\Deploy_bundle.json", text: prettyJSON
			}
		}
		success{
			script{
				BuildBadge.setStatus('passing')
			}
		}
		aborted{
			script{
				BuildBadge.setStatus('aborted')
			}
		}
		failure{
			script{
				BuildBadge.setStatus('failing')
			}
		}
	}
}
