@Library(["JenkinsCI", "DeployLib"]) _

import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput
import jenkins.model.Jenkins

MavenDeployResultList = []

TESTS_JSON = 'tests.json'

POST_JSON = 'post.json'
POST_TT_JSON = 'post_tt.json'
POST_PAY_JSON = 'post_pay.json'
POST_MS_JSON = 'post_ms.json'

DEPLOY_JSON = "deploy.json"
DEPLOY_TT_JSON = "deploy_tt.json"
DEPLOY_PAY_JSON = "deploy_pay.json"
DEPLOY_MS_JSON = "deploy_ms.json"

CLEAN_JSON = 'cleanup.json'

mainBadgeId = 'mainBadgeId'
TTBadgeId = 'TTBadgeId'
PAYBadgeId = 'PayBadgeId'
MSBadgeId = 'MSBadgeId'

def BuildBadge = addEmbeddableBadgeConfiguration(
	id: mainBadgeId, 
	subject: "Windows Deploy"
	)


def getParralelDeliveryMap(Map config = [:]){
	envOS = isUnix() ? "linux" : "windows"
	def result = config.jsonMap.collectEntries {[
		(it['name']) : {
			stage(it['name']){
				generateStages(it, config.stage)
			}
		}]
	}
	return result
}

def generateStages(job, stageName) {
    Closure stagesResult = {}
    for (stageScript in job['source']) {
		subStageName = stageScript.split('\\.')[0]
		libScriptPath = envOS + "/" + stageName + "/" + job['name']+ "/" + stageScript 
		libScript =libraryResource libScriptPath
		println stageScript.split('\\.')[-1]
		switch(stageScript.split('\\.')[-1]){
			case 'ps1':
				stagesResult << stage(subStageName){ 
					powershell (
							encoding: 'UTF8', 
							script: libScript,
							label: libScriptPath
							)
					} 
				break
			case 'sql':
				stagesResult << stage(subStageName){ 
					powershell (
							encoding: 'UTF8', 
							script: '''
								$q= @'
								'''+libScript + ''''@
								Invoke-Sqlcmd -verbose -QueryTimeout 720 -ServerInstance $env:COMPUTERNAME -Database BaltBetM -Query $q -ErrorAction stop
								''',
							label: libScriptPath
							)
					} 
				break
			default:
				stagesResult << stage(subStageName){ 
					println "not suported script extention:" +
						stageScript.split('\\.')[-1]	
					} 
		}
	}
    return stagesResult 
}

def getVmList(int max){
	def ints = 10..max
	def VM_LIST = [
		"devops-test-vm1",
		"devops-test-vm2", 
		"devops-test-vm3",
		"devops-test-vm4",
		"devops-test-vm5",
		"devops-test-vm6",
		"devops-test-vm7",
		"devops-test-vm8",
		"devops-test-vm9"
	]
	for (id in ints){
		VM_LIST += "devops-testvm${id}"
	}
	return VM_LIST
}

pipeline{

	parameters {
		string name:'Task', defaultValue: "", trim: true, description: "Branch(Task)"
		choice name:"TESTVM", choices: getVmList(100)
		booleanParam (
			name: "CUSTOM_TAG",
			description:'Enable tag chooser',
			defaultValue: false
			)
		booleanParam (
			name: "DEPLOY_MS",
			description:'Deploy Marketing Service',
			defaultValue: false
			)
		booleanParam (
			name: "DEPLOY_PAY",
			description:'Deploy Payment Balanser',
			defaultValue: false
			)
		booleanParam (
			name: "DEPLOY_TT",
			description:'Deploy Trading Tool', 
			defaultValue: false
			)
	}

	environment {
		SERVICE_CREDS = credentials('Testkernel')
		TT_SERVICE_CREDS = credentials('kernelsvc')
		NEXUS_CREDS = credentials('jenkinsAD')
		CUPIS_CERT_PASS = credentials('CupisCertPassword')
		CUPIS_FNS_KEY = credentials('CupisFnsKey')
		CUPIS_CERT_THUMBPRINT = credentials('CupisCertThumbprint')
		CUPIS_GRPC_CERT_PASS = credentials('testCupisPasswd')
	}

	agent {label "${TESTVM}" }

	tools {
		maven 'maven382'
	}
	options {
		parallelsAlwaysFailFast()
	}

	stages{

		stage('Choose release tag'){
			
			when{
				expression {
					params.CUSTOM_TAG
				}
			}
			steps{
				script{
					BuildBadge.setStatus('running')
					def tags = powershell(
							returnStdout:true,
							encoding:'UTF-8',
							script:'git tag'
							).split("\\r?\\n") as List
					if (tags[0] =~ /[a-zA-Z]/){
						tags.add(0,"Latest Commit")
						tag = input message: 'Choose release to deploy', ok: 'Deploy!',
						parameters: [choice (name: '', choices: tags, description: "Choose release")]
						if(tag != "Latest Commit"){
							powershell "git checkout tags/${tag}"
						}
					}
				}
			}
		}

		stage('Set Description'){
			steps{
				script{
					def all_lockable_resources = org.jenkins.plugins.lockableresources.LockableResourcesManager.get().resources
					def lockable_resource = all_lockable_resources.find { r->
						r.getName() == params.TESTVM
						}
					def boolean locked_by_me = (
						"${lockable_resource.getReservedBy()}" ==
							"${currentBuild.getBuildCauses()[0].userName}"
						)
					if (locked_by_me){
						println "Vm ${lockable_resource}" +
							" is locked by current build user (" +
							currentBuild.getBuildCauses()[0].userName +
							") \n Continue Build"
					}
					if (lockable_resource.isReserved() && !locked_by_me){
						def lastDescr = utils.getLastSuccessfullTaskJobDescription(NODE_NAME)
						def lastBuildDescr = "Can't find any info about last successfull build"
						if(lastDescr){
							lastBuildDescr ="Last successfull build " +
								lastDescr[1] +' '+ lastDescr[2] +
								" <br>Last  ${lastDescr[0]}"
						}
						currentBuild.description = "VM ${params.TESTVM} is Locked. " +
							" Skipped <br><p><a href='" + 
							"${JENKINS_URL}lockable-resources/"+
							"'>Remove VM Lock</a><p><br>${lastBuildDescr}"
						currentBuild.result = 'NOT_BUILT'
						error('VM is LOCKED. Check Lockable Resources')
					}
					else{
						def GIT_COMMIT_MSG = powershell (
							script: 'git log -1 --pretty=%B ${GIT_COMMIT}', 
							returnStdout: true, 
							label: "get commit message").trim()
						def GIT_COMMIT = powershell (
							script: 'git log -1 --pretty=%h', 
							label: "get commit message",
							returnStdout: true).trim()
						def BUILD_TRIGGER_BY = (
							currentBuild.getBuildCauses()[0].shortDescription) + 
							"/" + currentBuild.getBuildCauses()[0].userId
						currentBuild.description = (
							currentBuild.description ? currentBuild.description +'<br>' : '') +
							"vm: ${TESTVM}<br>${BUILD_TRIGGER_BY}" +
							"<br>CommitMsg: ${GIT_COMMIT_MSG}" +
							"<br>CommitHash: ${GIT_COMMIT}"+
							"<br>Task(Branch): ${params.Task}"
						println "Locking vm ${lockable_resource}" +
							" by current build user("+
							currentBuild.getBuildCauses()[0].userName +
							") \n Continue Build"
						lockable_resource.setReservedBy(
							currentBuild.getBuildCauses()[0].userName
							)
					}
					currentBuild.description = utils.addToDescription(
							description: currentBuild.description,
							html: "<a href='${BUILD_URL}'>" +
								"<img src='${BUILD_URL}badge/icon?config=${mainBadgeId}'></a>",
							position: 0 )
				}
			}
		}

		stage('Cleanup'){
			steps{
				script{
					def funcFile =libraryResource '/windows/sideFunctions.psm1' 
					writeFile (
						file: '.\\scripts\\sideFunctions.psm1',
						text: funcFile)
					parallel (getParralelDeliveryMap(
							jsonMap: readJSON (file: CLEAN_JSON), 
							stage: STAGE_NAME)
					)
				}
			}
		}

		stage('Get maven packages'){
			steps{
				script{
					def result = utils.doMavenDeploy(params.Task)
					MavenDeployResultList << result
				}
			}
		}

		stage('Deploy'){ 
			steps{
				withCredentials([
						file ( 
							credentialsId: 'bb-webapps', 
							variable: 'BBWEBAPPS'),
						file (
							credentialsId: 'gkbaltbet-ca', 
							variable: 'GKBALTBETCA'),
						file (
							credentialsId: 'wcf-host', 
							variable: 'WCFHOST'),
						file (
							credentialsId: 'client.test.kernel', 
							variable: 'CLIENTTESTKERNEL'),
						file (
							credentialsId: 'test.payment.service', 
							variable: 'TESTPAYMENTSERVICE'),
						file (
							credentialsId: 'testCupis', 
							variable: 'TESTCUPISCERT'),
						file (
							credentialsId: 'testCupisCA', 
							variable: 'TESTCUPISCA'),
				]){
					script{
						def List scriptFile =readJSON (file: DEPLOY_JSON ) 
						parallel (getParralelDeliveryMap(
							jsonMap: scriptFile, 
							stage: STAGE_NAME)
						)
					}
				}
			}
		}    

		stage('Deploy Marketing Service'){
			when{
				expression {
					params.DEPLOY_MS
				}
			}
			steps{
				script{
					stage('Get marketing maven packages'){
						MSBadge = addEmbeddableBadgeConfiguration(id: MSBadgeId, subject: "Marketing Deploy")
						MSBadge.setStatus('running')
						currentBuild.description = utils.addToDescription(
								description: currentBuild.description,
								html: "<a href='${BUILD_URL}'>" +
									"<img src='${BUILD_URL}badge/icon?config=${MSBadgeId}'></a>",
								position: 1)
						def deployDir = "\"-Ddeploy.dir=c:\\Services\\Marketing\""
						def taskBranch = utils.getNexusBranch ('Marketing', params.Task)
						println taskBranch
						if (taskBranch){
							println taskBranch
							def deployBranch = "\"-Ddeploy.branch=${taskBranch}\""
							def deployParams = "\"-Dmaven.repo.local=" +
								"${env.WORKSPACE}\\.mvn\\\"" +
								" \"-Ddeploy.groupid=Marketing\"" +
								" ${deployDir} ${deployBranch}"
							configFileProvider(
									[configFile(
										fileId: 'mavenSettingsGlobal', 
										targetLocation: 'MAVEN_SETTINGS.xml'),
									configFile(
										fileId: 'defaultPOM', 
										targetLocation: 'pomxml')
									]){
								powershell script: "mvn clean versions:use-latest-releases" +
									" dependency:unpack -s MAVEN_SETTINGS.xml"+
									" -f pomxml ${deployParams}"
								def packageVersion = powershell (
									script:"(Get-ChildItem -Directory "+ 
									".\\.mvnMarketing\\Marketing\\"+
									taskBranch+").name", 
									returnStdout: true)
								MavenDeployResultList << [
									Repo: 'Marketing',
									Branch: taskBranch,
									Version: packageVersion.trim()
								]
							}
						}
						else{
							println "Marketing repo has no master branch"
						}
					}
					stage('DeployMS'){
						def List scriptFile =readJSON (file: DEPLOY_MS_JSON) 
						parallel (
							getParralelDeliveryMap(
								jsonMap: scriptFile, 
								stage: STAGE_NAME)
						)
					}
				}
			}
			post{
				success{script {MSBadge.setStatus('passing')}}
				failure{script {MSBadge.setStatus('failing')}}
				unstable {script {
					MSBadge.setStatus('unstable')
						MSBadge.setColor('orange')}}
				aborted {script {MSBadge.setStatus('aborted')}}
			}
		}    

		stage('Deploy Trading Tool'){
			when{
				expression {
					params.DEPLOY_TT
				}
			}
			steps{
				script{
					TTBadge = addEmbeddableBadgeConfiguration(
						id: TTBadgeId,
						subject: "TT Deploy"
						)
					TTBadge.setStatus('running')
					currentBuild.description = utils.addToDescription(
							description: currentBuild.description,
							html: "<a href='${BUILD_URL}'>"+
								"<img src='${BUILD_URL}badge/icon?config=${TTBadgeId}'></a>",
							position: 1)
					stage('Get TT maven packages'){
						def deployDir = "\"-Ddeploy.dir=c:\\Services\\TradingTool \""
						def taskBranch = utils.getNexusBranch ('TradingTool', params.Task)
						if (taskBranch){
							println taskBranch
							def deployBranch = "\"-Ddeploy.branch=${taskBranch}\""
							def deployParams = "\"-Dmaven.repo.local=" +
								"${env.WORKSPACE}\\.mvn\\\""+
								" \"-Ddeploy.groupid=TradingTool\""+
								" ${deployDir} ${deployBranch}"
							configFileProvider(
									[configFile(
										fileId: 'mavenSettingsGlobal', 
										targetLocation: 'MAVEN_SETTINGS.xml'),
									configFile(
										fileId: 'defaultPOM', 
										targetLocation: 'pomxml')
									]){
								powershell script:"mvn clean versions:use-latest-releases"+
									" dependency:unpack -s MAVEN_SETTINGS.xml"+
									" -f pomxml ${deployParams}"
								def packageVersion = powershell (
									script: "(Get-ChildItem -Directory "+ 
										".\\.mvn\\TradingTool\\TradingTool\\"+
										taskBranch +").name" , 
									returnStdout: true)
								MavenDeployResultList << [
									Repo: 'TradingTool',
									Branch: taskBranch,
									Version: packageVersion.trim()
								]
							}
						}
						else{
							println "TT has no master branch"
						}
					}
				
					stage('DeployTT'){
						def List scriptFile = readJSON (file: DEPLOY_TT_JSON) 
						withCredentials([
								string(credentialsId: 'TTADFSClientId', variable: 'ADFSClientId'),
								file(credentialsId: 'TTadfs', variable: 'TTADFS')]){
								parallel (
									getParralelDeliveryMap(
										jsonMap: scriptFile, 
										stage: STAGE_NAME)
								)
						}
					}
				}
			}
			post{
				success{script {TTBadge.setStatus('passing')}}
				failure{script {TTBadge.setStatus('failing')}}
				unstable {script{
					TTBadge.setStatus('unstable')
						TTBadge.setColor('orange')}}
				aborted {script {TTBadge.setStatus('aborted')}}
			}
		}    

		stage('Deploy Payment Balanser'){
			when{
				expression {
					params.DEPLOY_PAY
				}
			}
			steps{
				script{
					PAYBadge = addEmbeddableBadgeConfiguration(
						id: PAYBadgeId, 
						subject: "PAY Deploy"
						)
					PAYBadge.setStatus('running')
					currentBuild.description = utils.addToDescription(
							description: currentBuild.description,
							html: "<a href='${BUILD_URL}'>"+
								"<img src='${BUILD_URL}badge/icon?config=${PAYBadgeId}'></a>",
							position: 1)

					stage('Get payment maven packages'){
						def deployDir = "\"-Ddeploy.dir=c:\\Services\\Payments\\PaymentBalancing \""
						def taskBranch = utils.getNexusBranch ('PaymentBalancing', params.Task)
						if (taskBranch){
							def deployBranch = "\"-Ddeploy.branch=${taskBranch}\""
							def deployParams = "\"-Dmaven.repo.local="+
								"${env.WORKSPACE}\\.mvn\\\""+
								" \"-Ddeploy.groupid=PaymentBalancing\""+
								" ${deployDir} ${deployBranch}"
							configFileProvider(
									[configFile(
										fileId: 'mavenSettingsGlobal', 
										targetLocation: 'MAVEN_SETTINGS.xml'),
									configFile(
										fileId: 'defaultPOM', 
										targetLocation: 'pomxml')
									]){
								powershell script:"mvn clean versions:use-latest-releases"+
									" dependency:unpack -s MAVEN_SETTINGS.xml "+
									" -f pomxml ${deployParams}"
								def packageVersion = powershell (
									script:"(Get-ChildItem -Directory "+
										".\\.mvnPaymentBalancing\\PaymentBalancing\\"+
										taskBranch+").name", 
									returnStdout: true)
								MavenDeployResultList << [
									Repo: 'PaymentBalancing',
									Branch: taskBranch,
									Version: packageVersion.trim()
								]
							}
						}
						else{
							println "PaymentBalancing has no master branch"
						}
					}
					stage('PaymentBalanceReport Maven Deploy'){
						def deployDir = "\"-Ddeploy.dir=c:\\Services\\Payments\\PaymentBalanceReport \""
						def taskBranch = utils.getNexusBranch ('PaymentBalanceReport', params.Task)
						if (taskBranch){
							println taskBranch
							def deployBranch = "\"-Ddeploy.branch=${taskBranch}\""
							def deployParams = "\"-Dmaven.repo.local="+
								"${env.WORKSPACE}\\.mvnPaymentBalancg\\\""+
								" \"-Ddeploy.groupid=PaymentBalanceReport\""+
								" ${deployDir} ${deployBranch}"
							configFileProvider(
									[configFile(
										fileId: 'mavenSettingsGlobal', 
										targetLocation: 'MAVEN_SETTINGS.xml'),
									configFile(
										fileId: 'defaultPOM', 
										targetLocation: 'pomxml')
									]){
								powershell "mvn clean versions:use-latest-releases"+
									" dependency:unpack -s MAVEN_SETTINGS.xml"+
									" -f pomxml ${deployParams}"
								def packageVersion = powershell (
									script:"(Get-ChildItem -Directory .\\.mvnPaymentBalancing\\PaymentBalanceReport\\master).name", 
									returnStdout: true)
								MavenDeployResultList << [
									Repo: 'PaymentBalanceReport',
									Branch: taskBranch,
									Version: packageVersion.trim()
								]
							}
						}
						else{
							println "PaymentBalanceReport has no master branch"
						}
					}

					stage('DeployPay'){
						def List scriptFile = readJSON (file: DEPLOY_PAY_JSON) 
						parallel (
							getParralelDeliveryMap(
								jsonMap: scriptFile, 
								stage: STAGE_NAME)
						)
					}
				}
			}
			post{
				success{script {PAYBadge.setStatus('passing')}}
				failure{script {PAYBadge.setStatus('failing')}}
				unstable {script {
					PAYBadge.setStatus('unstable')
						PAYBadge.setColor('orange')}}
				aborted {script {PAYBadge.setStatus('aborted')}}
			}
		}

		stage('Config IIS'){
			steps{
				powershell '.\\scripts\\IISConfig.ps1'
			}
		}

		stage('Config IIS for Marketing Service'){
			when{
				expression {
					params.DEPLOY_MS
				}
			}
			steps{
				powershell '.\\scripts\\IISconfigMS.ps1'
			}
			post{
				success{script {MSBadge.setStatus('passing')}}
				failure{script {MSBadge.setStatus('failing')}}
				unstable {script {
					MSBadge.setStatus('unstable')
						MSBadge.setColor('orange')}}
				aborted {script {MSBadge.setStatus('aborted')}}
			}
		}

		stage('Config IIS For Payment Balancer Blazor'){
			when{
				expression {
					params.DEPLOY_PAY
				}

			}
			steps{
				powershell '.\\scripts\\IISConfigPAY.ps1'
			}
			post{
				success{script {PAYBadge.setStatus('passing')}}
				failure{script {PAYBadge.setStatus('failing')}}
				unstable {script {
					PAYBadge.setStatus('unstable')
						PAYBadge.setColor('orange')}}
				aborted {script {PAYBadge.setStatus('aborted')}}
			}
		}

		stage('Config IIS For Trading Tool'){
			when{
				expression {
					params.DEPLOY_TT
				}
			}
			steps{
				powershell '.\\scripts\\IISConfigTT.ps1'
			}
			post{
				success{script {TTBadge.setStatus('passing')}}
				failure{script {TTBadge.setStatus('failing')}}
				unstable {script{
					TTBadge.setStatus('unstable')
						TTBadge.setColor('orange')}}
				aborted {script {TTBadge.setStatus('aborted')}}
			}
		}

		stage('PostPay'){
			when{
				expression {
					params.DEPLOY_PAY
				}
			}
			steps{
				script{ 
					def List scriptFile = readJSON (file: POST_PAY_JSON) 
					parallel (
						getParralelDeliveryMap(
							jsonMap: scriptFile, 
							stage: STAGE_NAME)
					)
				}
			}
			post{
				success{script {PAYBadge.setStatus('passing')}}
				failure{script {PAYBadge.setStatus('failing')}}
				unstable {script {
					PAYBadge.setStatus('unstable')
					PAYBadge.setColor('orange')}}
				aborted {script {PAYBadge.setStatus('aborted')}}
			}
		}

		stage('PostMS'){
			when{
				expression {
					params.DEPLOY_MS
				}
			}
			steps{
				script{ 
					def List scriptFile = readJSON (file: POST_MS_JSON) 
					parallel (
						getParralelDeliveryMap(
							jsonMap: scriptFile, 
							stage: STAGE_NAME)
					)
				}
			}
			post{
				success{script {MSBadge.setStatus('passing')}}
				failure{script {MSBadge.setStatus('failing')}}
				unstable {script {
					MSBadge.setStatus('unstable')
					MSBadge.setColor('orange')}}
				aborted {script {MSBadge.setStatus('aborted')}}
			}
		}

		stage('PostTT'){
			when{
				expression {
					params.DEPLOY_TT
				}
			}
			steps{
				script{ 
					def List scriptFile = readJSON (file: POST_TT_JSON) 
					parallel (
						getParralelDeliveryMap(
							jsonMap: scriptFile, 
							stage: STAGE_NAME)
					)
				}
			}
			post{
				success{script {TTBadge.setStatus('passing')}}
				failure{script {TTBadge.setStatus('failing')}}
				unstable {script{
					TTBadge.setStatus('unstable')
					TTBadge.setColor('orange')}}
				aborted {script {TTBadge.setStatus('aborted')}}
			}
		}

		stage('Post'){
			steps{ 
				script{ 
					def List scriptFile =readJSON (file: POST_JSON) 
					parallel (getParralelDeliveryMap(
								jsonMap: scriptFile, 
								stage: STAGE_NAME)
					)
				}
			}
		}

		stage('Tests'){
			steps{ 
				script{ 
					def List scriptFile =readJSON (file: TESTS_JSON) 
					parallel (getParralelDeliveryMap(
								jsonMap: scriptFile, 
								stage: STAGE_NAME)
					)
				}
			}
		}
		stage('Result Bundle'){
			steps{
				script{
					def jsonFormat = JsonOutput.toJson(
							MavenDeployResultList << [User: "${currentBuild.getBuildCauses()[0].userId}"]	
							)

						prettyJSON = JsonOutput.prettyPrint(jsonFormat)
						echo "${prettyJSON}"
				}
			}
		}
	}
	post{
		always{
			script{
				touch file: "c:\\Services\\Deploy_bundle.json"
				writeFile file: "c:\\Services\\Deploy_bundle.json", text: prettyJSON
			}
		}
		success{
			script{
				BuildBadge.setStatus('passing')
			}
		}
		aborted{
			script{
				BuildBadge.setStatus('aborted')
			}
		}
		failure{
			script{
				BuildBadge.setStatus('failing')
			}
		}
	}
}
