@Library(["JenkinsCI", "DeployLib"]) _

import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput
import jenkins.model.Jenkins
import groovy.xml.*

ARTIFACT_ITEMS =[:]

MavenDeployResult = """\
==============================
===== Current build bundle =====
==============================""".stripIndent()

TESTS_JSON = 'tests.json'

POST_JSON = 'post.json'
POST_TT_JSON = 'post_tt.json'
POST_MS_JSON = 'post_ms.json'
POST_WPARSER_JSON = 'post_wparser.json'
POST_WIDGETS_JSON = 'post_widgets.json'

DEPLOY_JSON = "deploy.json"
KUBER_JSON = "kuber.json"
CONSUL_JSON = "consul.json"
DEPLOY_TT_JSON = "deploy_tt.json"
DEPLOY_MS_JSON = "deploy_ms.json"
DEPLOY_WPARSER_JSON = "deploy_wparser.json"
DEPLOY_WIDGETS_JSON = "deploy_widgets.json"

CLEAN_JSON = 'cleanup.json'

MINIKUBE_LABEL = 'test_minikube'

mainBadgeId = 'mainBadgeId'
TTBadgeId = 'TTBadgeId'
MSBadgeId = 'MSBadgeId'
WParserBadgeId = 'WParserBadgeId'
WIDGETSBadgeId = 'WIDGETSBadgeId'

pomName = 'pom.xml'

def BuildBadge = addEmbeddableBadgeConfiguration(
	id: mainBadgeId,
	subject: "Windows Deploy")

def getNodeList(label = 'windows'){
	return Jenkins
		.instance
		.getNodes()
		.findAll{ it.getLabelString().contains(label) }
		.findAll{ it.toComputer().isOnline() }
		.name as List
}


pipeline{

	parameters {
		string name:'Task', defaultValue: "feature-PAY-725", trim: true, description: "Branch(Task)"
		choice name:"TESTVM", choices: getNodeList()
		string name:'Comments', defaultValue: "", trim: true, description: "Build comments"
		booleanParam (
			name: "CUSTOM_TAG",
			description:'Enable tag chooser',
			defaultValue: false
			)
		booleanParam (
			name: "DEPLOY_MS",
			description:'Deploy Marketing Service',
			defaultValue: false
			)
		booleanParam (
			name: "DEPLOY_TT",
			description:'Deploy Trading Tool',
			defaultValue: false
			)
		booleanParam (
			name: "DEPLOY_WPARSER",
			description: 'Deploy Web Parser',
			defaultValue: false
			)
		booleanParam (
			name: "DEPLOY_WIDGETS",
			description: 'Deploy BaltWidgets',
			defaultValue: false
			)
	}

	agent {label "${TESTVM}" }

	environment {
		SIDE_FUNCTIONS = '.\\scripts\\sideFunctions.psm1' 
		CONFIG_UPDATES = "configUpdates.log"
		SERVICE_CREDS = credentials('Testkernel')
		REDIS_CREDS = credentials('RedisCreds')
		RABBIT_CREDS = credentials('RedisCreds')
		TT_SERVICE_CREDS = credentials('kernelsvc')
		NEXUS_CREDS = credentials('jenkinsAD')
		CUPIS_CERT_PASS = credentials('CupisCertPassword')
		CUPIS_FNS_KEY = credentials('CupisFnsKey')
		CUPIS_CERT_THUMBPRINT = credentials('CupisCertThumbprint')
		CUPIS_GRPC_CERT_PASS = credentials('testCupisPasswd')
		DEPLOYUSER = "${currentBuild.getBuildCauses()[0].userId}"
		DEPLOY_USER_NAME = "${currentBuild.getBuildCauses()[0].userName}"
		NAMESPACE="$TESTVM"
		VM_ID="${TESTVM.replaceAll('\\D+','')}"
		REDIS_HOST = utils.getKuberNodeIP(
			nodeLabel:MINIKUBE_LABEL,
			KuberID:VM_ID.toInteger() % 2 == 0 ? 1:0)
		RABBIT_HOST = utils.getKuberNodeIP(
			nodeLabel:MINIKUBE_LABEL,
			KuberID:VM_ID.toInteger() % 2 == 0 ? 1:0)
		REDIS_PORT= utils.kuberPortShift(
			port:30100,
			VM:TESTVM)
		RABBIT_PORT=utils.kuberPortShift(
			port:30200,
			VM:TESTVM)
		RABBIT_WEB_PORT=utils.kuberPortShift(
			port:30300,
			VM:TESTVM)
		PAC_CERT_THUMBPRINT = credentials('testPaymentServiceThumbprint')
		UNI_REG_ENCRYPTION_PASSPHRASE = credentials('UniRegistrationEncryprionPassphrase')
	}


	tools {
		maven 'maven382'
	}
	options {
		parallelsAlwaysFailFast()
	}

	stages{
		stage('Choose release tag'){
			when{
				expression {
					params.CUSTOM_TAG
				}
			}
			steps{
				script{
					BuildBadge.setStatus('running')
					def tags = powershell(
							returnStdout:true,
							encoding:'UTF-8',
							script:'git tag'
							).split("\\r?\\n") as List
					if (tags[0] =~ /[a-zA-Z]/){
						tags.add(0,"Latest Commit")
						tag = input message: 'Choose release to deploy', ok: 'Deploy!',
						parameters: [choice (name: '', choices: tags, description: "Choose release")]
						if(tag != "Latest Commit"){
							powershell "git checkout tags/${tag}"
						}
					}
				}
			}
		}

		stage('Set Description'){
			steps{
				script{
					ARTIFACT_ITEMS = utils.getArtifacts()
					def all_lockable_resources = org.jenkins.plugins
						.lockableresources
						.LockableResourcesManager
						.get().resources
					def Map findResult = locks.findLocks(all_lockable_resources)
					if (findResult.accessDeny){
						def lastDescr = utils.getLastSuccessfullTaskJobDescription(NODE_NAME)
						descr.setDenyDescr(lastDescr)
						currentBuild.result = 'NOT_BUILT'
						error('VM is LOCKED. Check Lockable Resources')
					}
					else{
						def couse = currentBuild.getBuildCauses()[0]
						def newDescr = descr.setAllowDescr(couse:couse)
						currentBuild.description = newDescr
						findResult.resource.setReservedBy(couse.userName)
						locks.setNotes(
							vmName: TESTVM,
							branch: Task,
							widgets: DEPLOY_WIDGETS,
							tt: DEPLOY_TT,
							webParser: DEPLOY_WPARSER,
							ms: DEPLOY_MS,
							comments: Comments,
							buildUrl: BUILD_URL,
							buildNumber: BUILD_NUMBER,
							buildStatus: "<a href='${BUILD_URL}'>" +
								"<img src='${BUILD_URL}badge/icon?config=${mainBadgeId}' /></a>")
					}
					currentBuild.description = utils.addToDescription(
							description: currentBuild.description,
							html: "<a href='${BUILD_URL}'>" +
								"<img src='${BUILD_URL}badge/icon?config=${mainBadgeId}' /></a>",
							position: 0 )
				}
			}
		}

		stage('Cleanup env'){
			when{
				expression {
					not { env.JENKINS_DEVELOPER }
				}
			}
			steps{
				script{
					def funcFile =libraryResource 'windows/sideFunctions.psm1'
					writeFile (
							file: env.SIDE_FUNCTIONS,
							text: funcFile)
					parallel (generators.getParralelStagesMap(
								jsonMap: readJSON (file: CLEAN_JSON),
								artifactItems: ARTIFACT_ITEMS,
								stage: 'Cleanup')
							)
				}
			}
		}

		stage('Maven & Kuber'){
			when{
				expression {
					not { env.JENKINS_DEVELOPER }
				}
			}
			steps{
				script{
					def minikubeNodes = nodesByLabel 'test_minikube'
					Map tasks = [:]
					tasks['Get Maven Packages']={
						stage('maven'){
							def result = utils.doMavenDeploy(params.Task)
							MavenDeployResult = MavenDeployResult + result.trim()
						}
					}
					minikubeNodes.each{ minikubeNode ->
						tasks[minikubeNode]={
							node(minikubeNode){
								stage("cleanup"){
									sh(
										script:"kubectl delete ns ${TESTVM}|| echo 'NameSpace already removed'" ,
										label:'clean ns')
								}
							}
						}
					}
					parallel(tasks)
				}
			}
		}

		stage('Kuber deploy'){
			when{
				expression {
					not { env.JENKINS_DEVELOPER }
				}
			}
			agent{label utils.getKuberNodeLabel(
					KuberID:env.VM_ID.toInteger() % 2 == 0 ? 1 : 0 ,
					nodeLabel:MINIKUBE_LABEL)}
			steps{
				script{
					def List scriptFile = readJSON (file: KUBER_JSON )
					parallel (
						generators.getParralelStagesMap(
								jsonMap: scriptFile,
								artifactItems: ARTIFACT_ITEMS,
								stage: 'Deploy'))
				}
			}
		}

		stage('Consul deploy'){
			when{
				expression {
					not { env.JENKINS_DEVELOPER }
				}
			}
			steps{
				script{
					parallel (
						generators.getParralelStagesMap(
								jsonMap: readJSON (file: CONSUL_JSON),
								stage: 'Deploy')
							)
				}
			}
		}

		stage('Configure'){
			steps{
				withCredentials([
						file(
							credentialsId:'bb-webapps',
							variable:'BBWEBAPPS'),
						file(
							credentialsId:'gkbaltbet-ca',
							variable:'GKBALTBETCA'),
						file(
							credentialsId:'wcf-host',
							variable:'WCFHOST'),
						file(
							credentialsId:'client.test.kernel',
							variable:'CLIENTTESTKERNEL'),
						file(
							credentialsId:'test.payment.service',
							variable:'TESTPAYMENTSERVICE'),
						file(
							credentialsId:'testCupis',
							variable:'TESTCUPISCERT'),
						file(
							credentialsId:'testCupisCA',
							variable:'TESTCUPISCA'),
						string(
							credentialsId:'Asterisk_Secret',
							variable:'AsteriskSecret'),
						string(
							credentialsId:'Uni_DecryptionKey',
							variable:'UniDecryptionKey'),
						string(
							credentialsId:'Uni_ValidationKey',
							variable:'UniValidationKey')
				]){
					script{
						def List scriptFile = readJSON (file: DEPLOY_JSON)
						parallel (generators.getParralelStagesMap(
							artifactItems: ARTIFACT_ITEMS,
							jsonMap: scriptFile,
							stage: 'Deploy')
						)
					}
				}
			}
		}

		stage('Deploy Marketing Service'){
			when{
				expression {
					params.DEPLOY_MS
				}
			}
			steps{
				script{
					stage('Get marketing maven packages'){
						MSBadge = addEmbeddableBadgeConfiguration(
							id: MSBadgeId,
							subject: "Marketing Deploy")
						MSBadge.setStatus('running')
						currentBuild.description = utils.addToDescription(
								description: currentBuild.description,
								html: "<a href='${BUILD_URL}'>" +
									"<img src='${BUILD_URL}badge/icon?config=${MSBadgeId}' /></a>",
								position: 1)
						configFileProvider( [
								configFile(
									fileId: 'pomxml_v2',
									targetLocation: pomName )
								]){
							MavenDeployResult= MavenDeployResult + utils.doSingleServiceMavenDeploy(
									deployDir: "c:\\Services\\Marketing",
									branch: params.Task,
									groupId: "Marketing",
									pom: pomName,
									repo: ".mvn")
						}
					}
					stage('DeployMS'){
						def List scriptFile =readJSON (file: DEPLOY_MS_JSON)
						parallel (
							generators.getParralelStagesMap(
								artifactItems: ARTIFACT_ITEMS,
								jsonMap: scriptFile,
								stage:STAGE_NAME)
						)
					}
				}
			}
			post{
				success{script {MSBadge.setStatus('passing')}}
				failure{script {MSBadge.setStatus('failing')}}
				unstable {script {
					MSBadge.setStatus('unstable')
						MSBadge.setColor('orange')}}
				aborted {script {MSBadge.setStatus('aborted')}}
			}
		}

		stage('Deploy Trading Tool'){
			when{
				expression {
					params.DEPLOY_TT
				}
			}
			steps{
				script{
					stage('Get TT maven packages'){
						TTBadge = addEmbeddableBadgeConfiguration(
							id: TTBadgeId,
							subject: "TT Deploy")
						TTBadge.setStatus('running')
						currentBuild.description = utils.addToDescription(
								description: currentBuild.description,
								html: "<a href='${BUILD_URL}'>"+
									"<img src='${BUILD_URL}badge/icon?config=${TTBadgeId}' /></a>",
								position: 1)
						configFileProvider( [
								configFile(
									fileId: 'pomxml_v2',
									targetLocation: pomName)
								]){
							MavenDeployResult = MavenDeployResult + utils.doSingleServiceMavenDeploy(
									deployDir: "c:\\Services\\TradingTool",
									branch: params.Task,
									pom: pomName,
									groupId: "TradingTool",
									repo: ".mvn")
						}
					}

					stage('DeployTT'){
						def List scriptFile = readJSON (file: DEPLOY_TT_JSON)
						withCredentials([
								string(credentialsId: 'TTADFSClientId', variable: 'ADFSClientId'),
								file(credentialsId: 'TTadfs', variable: 'TTADFS')]){
								parallel (
									generators.getParralelStagesMap(
										artifactItems: ARTIFACT_ITEMS,
										jsonMap: scriptFile,
										stage: STAGE_NAME)
								)
						}
					}
				}
			}
			post{
				success{script {TTBadge.setStatus('passing')}}
				failure{script {TTBadge.setStatus('failing')}}
				unstable {script{
					TTBadge.setStatus('unstable')
						TTBadge.setColor('orange')}}
				aborted {script {TTBadge.setStatus('aborted')}}
			}
		}

		stage('Deploy WebParser'){
			when{
				expression {
					params.DEPLOY_WPARSER
				}
			}
			steps{
				script{
					stage('Get WebParser maven packages'){
						WPARSERBadge = addEmbeddableBadgeConfiguration(
								id: WParserBadgeId,
								subject: "WebParser Deploy")
						WPARSERBadge.setStatus('running')
						currentBuild.description = utils.addToDescription(
								description: currentBuild.description,
								html: "<a href='${BUILD_URL}'><img src='${BUILD_URL}badge/icon?config=${WParserBadgeId}' /></a>",
								position: 1)
						configFileProvider( [
								configFile(
									fileId: 'pomxml_v2',
									targetLocation:pomName)
								]){
							MavenDeployResult =MavenDeployResult + utils.doSingleServiceMavenDeploy(
									deployDir: "c:\\Services\\WebParser",
									branch: params.Task,
									pom: pomName,
									groupId: "WebParser",
									repo: ".mvn")
						}
					}
					stage('Deploy WebParser'){
						def List scriptFile =readJSON (file: DEPLOY_WPARSER_JSON)
						parallel (
							generators.getParralelStagesMap(
								artifactItems: ARTIFACT_ITEMS,
								jsonMap: scriptFile,
								stage: STAGE_NAME.replaceAll("\\s",""))
						)
					}
				}
			}
			post{
				success{script {WPARSERBadge.setStatus('passing')}}
				failure{script {WPARSERBadge.setStatus('failing')}}
				unstable {script{
					WPARSERBadge.setStatus('unstable')
						WPARSERBadge.setColor('orange')}}
				aborted {script {WPARSERBadge.setStatus('aborted')}}
			}
		}

		stage('Deploy BaltBetWidgets'){
			when{
				expression {
					params.DEPLOY_WIDGETS
				}
			}
			steps{
				script{
					stage('Get widgets maven packages'){
						WIDGETSBadge = addEmbeddableBadgeConfiguration(
							id: WIDGETSBadgeId,
							subject: "Widgets Deploy"
							)
						WIDGETSBadge.setStatus('running')
						currentBuild.description = utils.addToDescription(
								description: currentBuild.description,
								html: "<a href='${BUILD_URL}'>" +
									"<img src='${BUILD_URL}badge/icon?config=${WIDGETSBadgeId}' /></a>",
								position: 1)
						configFileProvider( [
								configFile(
									fileId: 'pomxml_v2',
									targetLocation:pomName )
								]){
							MavenDeployResult = MavenDeployResult + utils.doSingleServiceMavenDeploy(
									deployDir: "c:\\Services\\BaltWidgets",
									branch: params.Task,
									groupId: "BaltWidgets",
									pom: pomName,
									repo: ".mvn")
						}
					}
					/* Пока добавил деплой веб морды, но планируется выпуск парсера под этот сервис, который надо деплоить вместе с ним.
					Тогда могут понадобиться и пост и деплой*/
					stage('DeployWidgets'){
						def List scriptFile =readJSON (file: DEPLOY_WIDGETS_JSON)
						parallel (
							generators.getParralelStagesMap(
								artifactItems: ARTIFACT_ITEMS,
								jsonMap: scriptFile,
								stage: STAGE_NAME)
						)
					}
				}
			}
			/*
			post{
				success{script {WIDGETSBadge.setStatus('passing')}}
				failure{script {WIDGETSBadge.setStatus('failing')}}
				unstable {script {
					WIDGETSBadge.setStatus('unstable')
					WIDGETSBadge.setColor('orange')}}
				aborted {script {WIDGETSBadge.setStatus('aborted')}}
			}*/
		}

		stage('Config IIS'){
			steps{
				script{
					def iisScript = libraryResource "windows/Deploy/IIS/IISConfig.ps1"
					powershell script: iisScript, label: 'update iis config'
				}
			}
		}

		stage('Config IIS for Marketing Service'){
			when{
				expression {
					params.DEPLOY_MS
				}
			}
			steps{
				script{
					def iisScript = libraryResource "windows/DeployMS/IIS/IISConfig.ps1"
					powershell script: iisScript, label: 'update iis config'
				}
			}
			post{
				success{script {MSBadge.setStatus('passing')}}
				failure{script {MSBadge.setStatus('failing')}}
				unstable {script {
					MSBadge.setStatus('unstable')
						MSBadge.setColor('orange')}}
				aborted {script {MSBadge.setStatus('aborted')}}
			}
		}

		stage('Config IIS For Trading Tool'){
			when{
				expression {
					params.DEPLOY_TT
				}
			}
			steps{
				script{
					def iisScript = libraryResource "windows/DeployTT/IIS/IISConfig.ps1"
					powershell script: iisScript, label: 'update iis config'
				}
			}
			post{
				success{script {TTBadge.setStatus('passing')}}
				failure{script {TTBadge.setStatus('failing')}}
				unstable {script{
					TTBadge.setStatus('unstable')
						TTBadge.setColor('orange')}}
				aborted {script {TTBadge.setStatus('aborted')}}
			}
		}

		stage('Config IIS For BaltWidgets'){
			when{
				expression {
					params.DEPLOY_WIDGETS
				}

			}
			steps{
				script{
					def iisScript = libraryResource "windows/DeployWidgets/IIS/IISConfig.ps1"
					powershell script: iisScript, label: 'update iis config'
				}
			}
			post{
				success{script {WIDGETSBadge.setStatus('passing')}}
				failure{script {WIDGETSBadge.setStatus('failing')}}
				unstable {script {
					WIDGETSBadge.setStatus('unstable')
						WIDGETSBadge.setColor('orange')}}
				aborted {script {WIDGETSBadge.setStatus('aborted')}}
			}
		}

		stage('PostMS'){
			when{
				expression {
					params.DEPLOY_MS
				}
			}
			steps{
				script{
					def List scriptFile = readJSON (file: POST_MS_JSON)
					parallel (
						generators.getParralelStagesMap(
							artifactItems: ARTIFACT_ITEMS,
							jsonMap: scriptFile,
							stage: STAGE_NAME)
					)
				}
			}
			post{
				success{script {MSBadge.setStatus('passing')}}
				failure{script {MSBadge.setStatus('failing')}}
				unstable {script {
					MSBadge.setStatus('unstable')
					MSBadge.setColor('orange')}}
				aborted {script {MSBadge.setStatus('aborted')}}
			}
		}

		stage('PostTT'){
			when{
				expression {
					params.DEPLOY_TT
				}
			}
			steps{
				script{
					def List scriptFile = readJSON (file: POST_TT_JSON)
					parallel (
						generators.getParralelStagesMap(
							artifactItems: ARTIFACT_ITEMS,
							jsonMap: scriptFile,
							stage: STAGE_NAME)
					)
				}
			}
			post{
				success{script {TTBadge.setStatus('passing')}}
				failure{script {TTBadge.setStatus('failing')}}
				unstable {script{
					TTBadge.setStatus('unstable')
					TTBadge.setColor('orange')}}
				aborted {script {TTBadge.setStatus('aborted')}}
			}
		}

		stage('Post WebParser'){
			when{
				expression {
					params.DEPLOY_WPARSER
				}
			}
			steps{
				script{
					def List scriptFile = readJSON (file: POST_WPARSER_JSON)
					parallel (
						generators.getParralelStagesMap(
							artifactItems: ARTIFACT_ITEMS,
							jsonMap: scriptFile,
							stage: STAGE_NAME.replaceAll("\\s",""))
					)
				}
			}
			post{
				success{script {WPARSERBadge.setStatus('passing')}}
				failure{script {WPARSERBadge.setStatus('failing')}}
				unstable {script{
					WPARSERBadge.setStatus('unstable')
					WPARSERBadge.setColor('orange')}}
				aborted {script {WPARSERBadge.setStatus('aborted')}}
			}
		}

		stage('Post'){
			steps{
				script{
					def List scriptFile =readJSON (file: POST_JSON)
					parallel (generators.getParralelStagesMap(
							artifactItems: ARTIFACT_ITEMS,
								jsonMap: scriptFile,
								stage: STAGE_NAME)
					)
				}
			}
		}

		stage('Tests'){
			steps{
				script{
					def List scriptFile =readJSON (file: TESTS_JSON)
					parallel (generators.getParralelStagesMap(
							artifactItems: ARTIFACT_ITEMS,
								jsonMap: scriptFile,
								stage: STAGE_NAME)
					)
				}
			}
		}
		stage('Result Bundle'){
			steps{
				script{
					MavenDeployResult  = MavenDeployResult  +
						""" __________
						User: ${currentBuild.getBuildCauses()[0].userId}
						=============================================="""
					echo MavenDeployResult
					touch file: "c:\\Services\\Deploy_bundle.txt"
					writeFile file: "c:\\Services\\Deploy_bundle.txt", text: MavenDeployResult
				}
			}
		}
	}
	post{
		always {
			script{
				requests.updateConfluence(
					vm: TESTVM,
					root: '104268990',
					spacekey: 'DEV',
					body: currentBuild.description,
					auth: 'jenkinsAD')
				if(false){cleanWs notFailBuild: true}
			}
		}
		success{
			script {
				BuildBadge.setStatus('passing')
				defaultPostSuccess()
				makeLogs('Success')
			}
		}
		failure{
			script {
				BuildBadge.setStatus('failing')
				defaultPostFail()
				makeLogs('Fail')
			}
		}
		unstable {
			script {
				BuildBadge.setStatus('unstable')
				BuildBadge.setColor('orange')
				defaultPostUnstable()
				makeLogs('Unstable')
			}
		}
		aborted {
			script {
				BuildBadge.setStatus('aborted')
				defaultPostAborted()
				makeLogs('Aborted')
			}
		}
	}
}
